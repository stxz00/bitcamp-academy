버전관리 vcs
파일 변화를 시간에 따라 기록했다가 나중에 특정 시점의 버전을 다시 꺼내올 수 잇는 시스템

로컬버전 관리(RCS)

중앙집중식 버전 관리(CVCS)
다른 개발자와 함께 작업해야하는 프로젝트의 경우 사용.
파일을 관리하는 서버가 별도로 있고 클라이언트가 중앙 서버에서 파일을 받아서 사용.
모두 누가 무엇을 하고 있는지 알 수 있고 관리자는 누가 무엇을 할 지 꼼꼼하게 관리할 수 있다.
단점은 중앙데이터베이스가 있는 하드디스크에 문제가 생기면 프로젝트의 모든 히스토리를 잃음,

부산 버전 관리 시스템(DVCS)
클라이언트들이 단순히 파일의 마지막 스냅샷을 Checkout 하는 게 아닌 저장소 전부 복제.
그래서 서버에 문제가 생기더라도 복제한 것으로 작업이 가능함. 게다가 리모드 저장소가 있어 다양한
그룹과 다양한 방법으로 협업이 가능.

Git
깃은 단순히 시간순으로 저장하는 것이 아닌 데이터를 파일 시스템 스냅샷의 스트림으로 취급하고
커밋하거나 프로젝트를 저장할 때마다 새로 저장한다. 즉, 파일이 달라지지 않았다면 저장하지 않고
이전 상태의 파일에 대한 링크만 저장한다.

거의 모든 명령을 로컬에서 실행하기 때문에 다른 컴퓨터가 필요없다. 프로젝트의 히스트로리를 조회할 때
서버가 필요없고 로컬 데이터베이스에서 히스토리를 읽어서 보여주면 되므로 굉장히 빠르다.

Git의 무결성
데이터를 저장하기 전에 항상 체크섬을 구하고 체크섬으로 데이터를 관리.

Git은 데이터를 추가할 뿐 
git으로 무엇을 하든 데이터베이스에 데이터가 추가되므로 데이터를 잃어버리기 어렵다.

세 가지 상태 : 
Committed : 데이터가 로컬 데이터베이스에 안전하게 저장됐다는 것을 의미.
Modified : 수정한 파일을 아직 로컬 데이터베이스에 커밋하지 않은 것.
Staged : 현재 수정한 파일을 곧 커밋할 것이라고 표시한 상태.

Git으로 하는 일 :
1. 워킹 디렉토리에서 파일을 수정한다
2. Staging Area에 파일을 Stage 해서 커밋할 스냅샷을 만든다
3. Staging Area에 있는 파일들을 커밋해서 Git디렉토리에 영구적인 스냅샷을 만든다.

Staging Area는 Git 디렉토리에 있고 종종 인덱스라고 불린다. 

Git을 전부 사용하는 건 CLI이며 CLI를 사용할 줄 알면 GUI도 사용할 수 있으나 그 반대로는 안된다.

---------------------------------------------------------------------------------------------------------
Git 사용법 

1. /etc/gitconfig 파일 : 시스템의 모든 사용자와 모든 저장소에 적용되는 설정
2. /.gitconfig/config/git/config 파일 : 특정 사용자에게만 적용되는 설정
3. git/config : 이파일은 Git 디렉토리에 있고 특정 저장소에만 적용됨
3에서 1순으로 우선한다.


처음 설정

1. 사용자 이름과 이메일 주소 설정 
git config --global user.name "Hanam Lee"
git config --global user.email stxz00naver.com

여기서 --global은 딱 한 번만 하면 됨. 만일 프로젝트마다 다른 이름과 이메일주소를 사용하고 싶으면
--global 옵션만 빼고 실행하면 됨

2. 편집기
Git에서 사용할 텍스트 편집기를 고름. 
윈도우 사용자의 경우 메모장으로 편집하고 싶을때 다음과 설정을 하면 된다.
git config --global core.editor "'C:/Program Files
(x86)/Notepad++/notepad++.exe' -multiInst -nosession"

3. 설정한 내용 확인 방법
(1) 설정한 모든 내용 확인 방법
git config --list

(2) 특정 key에 대한 값을 확인하는 방법
git config <key>

4. 도움말 보기
브라우저로 메뉴얼창 띄어준다(오프라인)
git help config

5. Git 저장소 설정 
원하는 파일을 우클릭하여 Git Bash Here를 클릭 후 git init를 하여 해당 폴더에 .git 하위 디렉토리를 만든다

6. Root Folder 연결
git remote add origin https://github.com/stxz00/test01.git

7. 다른 프로젝에 참여하거나 Git 저장소를 복사하고 싶을 때(Clone)
git clone https://github.com/bit01class/AIAjava2020
git clone https://github.com/bit01class/AIAjava2020 원하는폴더이름

8. 파일의 상태 확인하기
git status 
Clone 후 바로 git status를 하면 Tracked이면서 Unmodified 상태. 복제 후 아무것도 수정하지 않았기 때문.

9. 파일을 새로 추적하기
git add README
README 파일을 추적하며 git status 명령을 다시 실행하면 tracked 상태이면서 staged상태라는 것을 확인

10. Modified 상태의 파일을 Stage 하기


*push 전엔 pull이 있다
pull하기 전에 push를 하게 되면 레퍼지토리를 현재 것으로 다 덮어써버리게 됨

push는 깃 레포지토리로 자료를 올리는 것이고 pull은 자료를 가져오는 것

pull
git pull origin master 지정 해놓은 Repository에서 자료를 모두 끌어오는 것

push
git status 현재 git과의 상태를 체크
git add . 변경된 파일들을 모두 Tracking
git commit -m "message" 인식할 수 있는 commit을 달아준다. 나 또는 다른사람에게 알려주는 commit을 달 수있는 명령
git push origin +master : 실제로 git에 마스터

이클립스로 git을 통해 협업하기
원하는 



 





